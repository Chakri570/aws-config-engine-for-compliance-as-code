#
# Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed 
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
# express or implied. See the License for the specific language governing 
# permissions and limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: Sets up the Datalake for the Compliance-as-Code. 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Compliance-as-Code Dalatake Configuration
        Parameters:
         - CentralizedS3BucketConfig
         - CentralizedS3BucketComplianceEventName
      - Label:
          default: (Demo Mode) To create a demonstration enviroment.
        Parameters: 
         - DataSampleFeature
         - SourceLambdaBucket
         - DataSampleLambdaName

Parameters:
  SourceLambdaBucket:
    Type: String
    Description: For demo purpose only - Bucket name where lambda code zip is placed
    Default: input-the-bucket-name-where-you-upload-the-zip
    MaxLength: 63
    MinLength: 3
    ConstraintDescription: Enter the name not the ARN, must be in the same region than the stack
  
  DataSampleFeature:
    Description: For demo purpose only - Create a demonstration enviroment by setting this parameter to "true". It creates a lambda function which generate samples of compliance events (initially 10 days then daily).
    Default: false
    AllowedValues:
      - true
      - false
    Type: String  
    
  CentralizedS3BucketConfig:
    ConstraintDescription: Enter DNS-compliant prefix
    Description: Bucket prefix where Config logs are stored. A dash and the account ID (12-digit) will be appended to the name.
    Default: centralized-config
    MaxLength: 63
    MinLength: 10
    Type: String

  CentralizedS3BucketComplianceEventName:
    ConstraintDescription: Enter DNS-compliant prefix
    Description: Bucket prefix where Compliance Event are stored. A dash and the account ID (12-digit) will be appended to the name.
    Default: compliance-events-centralized
    MaxLength: 63
    MinLength: 10
    Type: String
    
  DataSampleLambdaName:
    Description: For demo purpose only - Name of the Lambda Function which is trigger daily to generate data samples for the Compliance Engine.
    Default: generate-compliance-events-data-samples
    MaxLength: 63
    MinLength: 10
    Type: String   
    
Conditions:
    DataSample: !Equals [ !Ref DataSampleFeature, true ]
    
Resources:
  DataSampleIAMRole:
    Condition: DataSample
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ '-', [!Ref DataSampleLambdaName, 'LambdaRole']]
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/SecurityAudit'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17

  DataSampleLogPolicy:
    Condition: DataSample
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles: 
      - !Join [ '-', [!Ref DataSampleLambdaName, 'LambdaRole']]
      PolicyName: DataSampleLogPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogGroup'
            Resource: !Join 
              - ':'
              - - 'arn:aws:logs'
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 
              - !Join [ '', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/lambda/*', ':*']]
    DependsOn: DataSampleIAMRole
  
  CreateLambdaGenerateData:
    Condition: DataSample
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref SourceLambdaBucket
        S3Key: !Join [ ".", [ !Ref DataSampleLambdaName , zip]]
      FunctionName: !Ref DataSampleLambdaName 
      Handler: !Join [ ".", [ !Ref DataSampleLambdaName , lambda_handler]]
      Role: !GetAtt DataSampleIAMRole.Arn
      Environment:
        Variables:
          Bucket: !Join [ "-", [ !Ref CentralizedS3BucketComplianceEventName, !Ref 'AWS::AccountId']]
      Runtime: python3.6
      Timeout: 300
    DependsOn: 
    - DataSampleIAMRole

  DataSampleLambdaPermission:
    Condition: DataSample
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DataSampleLambdaName 
      Principal: lambda.amazonaws.com
    DependsOn: CreateLambdaGenerateData
    
  ScheduledEventRuleToGenerateData: 
    Condition: DataSample
    Type: "AWS::Events::Rule"
    Properties: 
      Name: "ComplianceAsCode-ScheduledRuleToGenerateData"
      Description: "Daily trigger to generate data sample for the compliance-as-code engine."
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt CreateLambdaGenerateData.Arn
          Id: "TargetFunctionV1"
    DependsOn: CreateLambdaGenerateData
          
  PermissionForEventsToInvokeLambda: 
    Condition: DataSample
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: 
        Ref: "CreateLambdaGenerateData"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateLambdaGenerateData.Arn
    DependsOn: CreateLambdaGenerateData
        
  AthenaNamedQueryInitDB:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "default"
      Description: "(To be run 1st) A query to build database for advanced analytics"
      Name: "1-Database For ComplianceAsCode"
      QueryString: "CREATE DATABASE IF NOT EXISTS complianceascode"
      
  AthenaNamedQueryInitTable:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "complianceascode"
      Description: "(To be run 2nd) A query to build table for advanced analytics"
      Name: "2-Table For ComplianceAsCode"
      QueryString: !Join 
        - ""
        - - "CREATE EXTERNAL TABLE IF NOT EXISTS complianceascode.events (`rulearn` string,`recordedinddbtimestamp` string,`rulename` string,`resourcetype` string,`resourceid` string,`compliancetype` string, `whitelistedcompliancetype` string,`lastresultrecordedtime` string,`accountid` string,`accountclassification` string,`rulecriticity` string) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe' WITH SERDEPROPERTIES ('paths'='AccountClassification,AccountID,ComplianceType,WhitelistedComplianceType,LastResultRecordedTime,RecordedInDDBTimestamp,ResourceId,ResourceType,RuleARN,RuleCriticity,RuleName') STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' LOCATION 's3://"
          - !Join [ "-", [ !Ref CentralizedS3BucketComplianceEventName, !Ref 'AWS::AccountId']]
          - "/compliance-as-code-events/' TBLPROPERTIES ('classification'='json', 'compressionType'='gzip', 'transient_lastDdlTime'='1521161215', 'typeOfData'='file')"
 
  AthenaNamedQueryConfigTable:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "complianceascode"
      Description: "(To be run 3rd) A query to build table for query config"
      Name: "3-Table For Config in ComplianceAsCode"
      QueryString: !Join 
        - ""
        - - "CREATE EXTERNAL TABLE IF NOT EXISTS complianceascode.config (fileVersion string, configSnapshotId string, configurationItems array<struct<relatedEvents:string, relationships:string, configuration:string, supplementaryConfiguration:string, tags:string, configurationItemVersion:string, configurationItemCaptureTime:string, configurationStateId:string, awsAccountId:string, configurationItemStatus:string, resourceType:string, resourceId:string, resourceName:string, ARN:string, awsRegion:string, availabilityZone:string, configurationStateMd5Hash:string, resourceCreationTime:string>>) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe' WITH SERDEPROPERTIES ('serialization.format' = '1') LOCATION 's3://"
          - !Join [ "-", [ !Ref CentralizedS3BucketConfig, !Ref 'AWS::AccountId']]
          - "/'"
